#!/usr/bin/env bash

HFCTL=v0.4.0
IMAGE=hyperf/hyperf:8.2-alpine-v3.18-swoole-v5.1
HFCID=runtime/hfctl.cid

version() {
    echo -e "hfctl: \033[1;32m$HFCTL\033[0m"
    echo -e "image: \033[1;32m$IMAGE\033[0m"
}

help() {
    echo -e "\033[1;33mUsage:\033[0m"
    echo -e "   hfctl <command> [arguments]"
    echo -e ""
    echo -e "\033[1;33mCommands:\033[0m"
    echo -e "   \033[1;32mhelp\033[0m                   Shows this help message"
    echo -e "   \033[1;32mversion\033[0m                Displays hfctl and image version"
    echo -e "   \033[1;32mself-update\033[0m            Updates hfctl to the latest version"
    echo -e "   \033[1;32mcreate <project-name>         Creates a new Hyperf project"
    echo -e "   \033[1;32mcomposer <subcommand>\033[0m  Runs composer commands"
    echo -e "   \033[1;32mconsole <command>\033[0m      Runs Hyperf console commands \033[1;37m(php bin/hyperf.php <command>)\033[0m"
    echo -e "   \033[1;32mstart [port]\033[0m           Starts the Hyperf server \033[1;37m(default port 9501)\033[0m"
    echo -e "   \033[1;32mstop\033[0m                   Stops the Hyperf server"
    echo -e "   \033[1;32mrestart\033[0m                Restart the Hyperf server"
    echo -e "   \033[1;32mwatch [port]\033[0m           Starts the Hyperf watcher \033[1;37m(default port 9501)\033[0m"
    echo -e "   \033[1;32mup\033[0m                     Runs Docker Compose up"
    echo -e "   \033[1;32mdown\033[0m                   Runs Docker Compose down"
    echo -e "   \033[1;32mlogs [-f|--follow]\033[0m     Shows the Hyperf container logs \033[1;37m(use -f or --follow to follow logs)\033[0m"
    echo -e "   \033[1;32mtest\033[0m                   Runs PHPUnit tests"
    echo -e "   \033[1;32mlint\033[0m                   Runs PHP Coding Standards Fixer"
    echo -e "   \033[1;32manalyse [-l<level>]\033[0m    Runs PHPStan analyses \033[1;37m(default level 5)\033[0m"
    echo -e ""
}

install() {
    HFCTL_DIR=$(dirname $(realpath $0))
    sudo ln -sf "${HFCTL_DIR}/hfctl" /usr/local/bin/hfctl
    sudo ln -sf "${HFCTL_DIR}/hfctl" /usr/local/bin/hf
    sudo ln -sf "${HFCTL_DIR}/hfctl" /usr/local/bin/hyperf
}

self-update() {
    HFCTL_DIR=$(dirname $(realpath $0))
    cd $HFCTL_DIR
    git pull origin main
}

create() {
    docker-run ${HFTTY:--it} composer create-project hyperf/hyperf-skeleton:dev-master $1
    sudo chown -R $UID:$UID $1
}

composer() {
    pre-check
    docker-run ${HFTTY:--it} composer $@
}

start() {
    pre-check
    PORT=${1:-9501}
    if [ -n "$(docker ps --format 'table {{.Ports}}' | grep $PORT)" ]; then
        echo -e "\033[0;31mPort $PORT is already in use by another container\033[0m"
        exit 1
    fi
    echo -e "Container ID:" $(docker-run "-dp$PORT:9501 --cidfile $HFCID" php bin/hyperf.php ${2:-start})
    echo -e "\033[1;32mHyperf server started at $PORT\033[0m"
    echo -e "http://localhost:$PORT"
}

watch() {
    pre-check
    if [[ "$(composer show hyperf/watcher 2>&1)" == *"\"hyperf/watcher\" not found"* ]]; then
        docker-run ${HFTTY:--it} composer require --dev hyperf/watcher
    fi
    start ${1:-9501} server:watch
}

stop() {
    pre-check cid
    docker stop $(cat $HFCID)
    rm $HFCID
}

restart() {
    pre-check cid
    echo -e "Container ID:" $(docker restart $(cat $HFCID))
}

console() {
    pre-check
    docker-run ${HFTTY:--it} php bin/hyperf.php $@
}

logs() {
    DC=$(docker compose ps --format 'json {{.Name}}')
    if [[ -n $DC ]]; then
        docker compose logs $@
    else
        pre-check cid
        docker logs $@ $(cat $HFCID)
    fi
}

up() {
    docker compose up -d
}

down() {
    docker compose down --remove-orphans
}

test() {
    docker-run ${HFTTY:--it} php vendor/bin/co-phpunit --prepend test/bootstrap.php $@
}

lint() {
    docker-run ${HFTTY:--it} php vendor/bin/php-cs-fixer fix $@
}

analyse() {
    docker-run ${HFTTY:--it} php vendor/bin/phpstan analyse ${@:--l5} app
}

docker-run() {
    docker run --user $UID --rm -w /opt -v ./:/opt $1 --entrypoint $2 $IMAGE ${@:3}
}

ps() {
    docker ps
}

pre-check() {
    if ! [ -f bin/hyperf.php ]; then
        echo -e "\033[0;31mAre you in a Hyperf project?\033[0m"
        exit 1
    fi

    if [[ $1 == cid ]]; then
        if ! [ -f $HFCID ]; then
            echo -e "\033[0;31mThe Hyperf server is not running\033[0m"
        exit 1
        fi
    fi
}

CMD=${1:-help}
ARGS=${@:2}
$CMD $ARGS
